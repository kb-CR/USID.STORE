class media extends remote
{
    //public string $uri = 'https://www.iana.org/assignments/media-types/media-types.txt';
    public ArrayIterator $type;

    public function __construct(string $file_name)
    {
        parent::__construct($file_name);
        $this->type = new ArrayIterator($this->types());
    }

    public function getMediaType(SplFileInfo $file_info): array|string
    {
        $extension = $file_info->getExtension();
        $this->type->rewind();
        do
        {
            $key = $this->type->key();
            if(multibyte::compare($key, $extension))
            {
                return $this->type->current();
            }
            $this->type->next();
        }
        while($this->type->valid());
        if($file_info->isFile() && $file_info->isReadable())
        {
            return mime_content_type($file_info->getRealPath());
        }
        return 'plain/text';
    }

    public function types(): array
    {
        if($this->isFile() === false || $this->expired())
        {
            $this->cabbage();
        }
        $file_object = $this->openFile('r', false, null);
        $json = $file_object->fread($file_object->getSize());
        return json_decode(
            $json,
            true,
            5,
            JSON_OBJECT_AS_ARRAY | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_BIGINT_AS_STRING | JSON_THROW_ON_ERROR
        );
    }

    private function cabbage()
    {
        $from_file_object = new SplFileObject('text/plain/media-types', 'r');
        $to = join(INI, [
            $this->getPathInfo(),
            __CLASS__
        ]);
        $to_file_info = new SplFileInfo($to);
        $to_file_object = $to_file_info->openFile('w+', false, null);
        $structure = [];
        $write = false;
        do
        {
            $line = $from_file_object->fgets();
            $chunk = preg_split('/[\s]+/i', $line, -1, PREG_SPLIT_NO_EMPTY);
            if($write === true && count($chunk) !== 0 && count($chunk) === 3)
            {
                if(isset($structure[$chunk[0]]))
                {
                    if(is_array($structure[$chunk[0]]))
                    {
                        $structure[$chunk[0]][] = $chunk[1];
                    }
                    else
                    {
                        $structure[$chunk[0]] = [$structure[$chunk[0]], $chunk[1]];
                    }
                }
                else
                {
                    $structure[$chunk[0]] = $chunk[1];
                }
            }
            else if(count($chunk) === 0)
            {
                $write = false;
            }
            if(count($chunk) === 3) 
            {
                if($chunk[0] == 'Name' && $chunk[1] == 'Template' && $chunk[2] == 'Reference')
                {
                    $write = true;
                }
            }
            
        }
        while($from_file_object->valid());
        $json = json_encode($structure, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE, 4);
        $to_file_object->fwrite($json);
    }
}